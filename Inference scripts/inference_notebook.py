# -*- coding: utf-8 -*-
"""Inference Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dqaxLgrwJIjcfkYwNvfwEcVNpxar_Bhn

## First Thing We Will intall The Depenedecies
"""

# Install dependencies
!pip install wget
!apt-get install sox libsndfile1 ffmpeg
!pip install text-unidecode
!pip install matplotlib>=3.3.2

## Install NeMo
BRANCH = 'r2.0.0rc0'
!python -m pip install git+https://github.com/NVIDIA/NeMo.git@$BRANCH#egg=nemo_toolkit[all]

## Grab the config we'll use in this example
!mkdir configs
!wget -P configs/ https://raw.githubusercontent.com/NVIDIA/NeMo/$BRANCH/examples/asr/conf/citrinet/config_bpe.yaml

"""
Remember to restart the runtime for the kernel to pick up any upgraded packages (e.g. matplotlib)!
Alternatively, you can uncomment the exit() below to crash and restart the kernel, in the case
that you want to use the "Run All Cells" (or similar) option.
"""
# exit()

"""## Libraries Initiliaztion"""

# NeMo's "core" package
import nemo
# NeMo's ASR collection - this collections contains complete ASR models and
# building blocks (modules) for ASR
import nemo.collections.asr as nemo_asr

"""## Finally iterate through Folder and transcribe WAV Files and save results in csv format

### Dont Forget to add **amir.nemo** to runtime from github repo
"""

import os
import pandas as pd
from nemo.collections.asr.models import EncDecCTCModelBPE

# Initialize the ASR model
asr_model = EncDecCTCModelBPE.restore_from(restore_path="amir.nemo")

# Directory containing WAV files
audio_dir = "./test"

# List all WAV files in the directory
audio_files = [os.path.join(audio_dir, f) for f in os.listdir(audio_dir) if f.endswith('.wav')]

# Prepare a list to store transcriptions
transcriptions = []

# Transcribe each audio file
for audio_file in audio_files:
    audio_id = os.path.basename(audio_file).split('.')[0]
    transcription = asr_model.transcribe([audio_file], batch_size=1)[0]
    transcriptions.append({"audio_id": audio_id, "text": transcription})

# Save the transcriptions to a CSV file
output_df = pd.DataFrame(transcriptions)
output_df.to_csv("transcriptions.csv", index=False, encoding='utf-8')

print("Transcriptions saved to transcriptions.csv")
